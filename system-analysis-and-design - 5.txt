
    = 논리적 설계는 시스템의 비즈니스 측면들에 초점을 맞춘다. 즉, 이 시스템이 조직 내의 기능 단위들에 어떻게 영향을 줄 것인지에 초점을 맞춘다.

    ▶ 물리적 설계(physical design)
    = 논리적 설계안을 물리적이거나 기술적인 내역으로 변경시키는 작업이 수행된다.
    = 예를 들면, 데이터 흐름 및 프로세스가 그려진 다이어그램을 프로그래밍 언어로 작성된 명령어로 변환시키기 위해 보다 더 작은 단위로 쪼개질 수 있는 구조화된 시스템 설계안으로 변환시켜야 한다.
    = 물리적 설계를 하는 동안, 분석 팀은 프로그래밍 언어, 데이터베이스 시스템과 파일 구조, 하드웨어 플랫폼, 운영체제, 네트워크 환경 등을 결정한다.(기술적인 세부내역을 결정)
    → 설계 단계의 최종 결과물은 프로그래머와 여타의 개발자들에게 넘겨주어야 하는 물리적 시스템 내역인데, 이것은 보통 도표와 문장으로 구성된 리포트 형태로 작성된다.

   ◆ 단계 4 : 시스템 구현 및 운영
    = SDLC의 최종 단계로써, 정보시스템을 코드화하고, 테스트하며 설치하는 활동들과 정보시스템을 체계적으로 수리하고 개선하는 활동들
    = 즉, 시스템의 설계 내역을 테스트를 거친 시스템으로 전환시키고 난 다음 이것을 실무에 투입하여 사용한다.
    ▶ 두 가지 프로세스로 구성됨.(구현 및 운영)
     구현 프로세스에는 코딩, 테스팅, 설치활동이 포함된다.
    = 설치 된 후 사용자들은 이 시스템을 소개받게 도고 관련 교육을 받게 된다.
    = 시스템 구현 활동들에는 문서화의 마무리, 교육, 지속적인 사용자 보조와 같은 사용자들에 대한 초기 지원활동들이 포함된다.

    ✓ 문서 : 생명주기 전반에 걸쳐 산출
    ✓ 교육 : 프로젝트의 초기부터 수행

    = 시스템 구현은 시스템이 존재하는 동안 계속 된다. → 지속적인 사용자 지원도 구현 단계의 일부분이기 때문.

     운영 과정
    = 프로그래머들은 사용자의 요구와 비즈니스 환경의 변화를 반영하기 위해서 시스템을 수정해야 한다.


  ※ 운영 과정 중 시스템 향상을 위해 소요된 시간과 노력의 양은 생명주기 상의 이전 단계들의 성과에 크게 영향을 받는다.
    → 운영 중에 여러 가지 문제점들이 지속적으로 발생된다면, 시스템 교체를 위한 새로운 설계를 시작할 시간이 되었음을 알려주는 것이다.
    → 이로 인해 지금까지의 순환이 한 단락 마감되고 새로운 생명주기가 다시 시작되는 것이다.

    ◆ SDLC 단계들의 산출물들

단계
생산물, 산출물, 전달물
시스템 계획 및 선정
✦ 시스템과 프로젝트에 대한 우선순위
✦ 데이터, 네트워크, 하드웨어, IS 관리에 대한 아키텍처
✦ 선정된 프로젝트에 대한 구체적인 작업 계획
✦ 시스템 범위에 대한 내역
✦ 시스템 정당화 또는 비즈니스 사례
시스템 분석
✦ 현재 시스템에 대한 기술
✦ 현재 시스템에 대한 수정, 개선 또는 대체 방법에 관한 총체적인 추천사항들
✦ 선정된 대안 시스템과 타당성에 대한 설명
시스템 설계
✦ 모든 시스템 요소들에 대한 상세 내역
✦ 신기술에 대한 획득 계획
시스템 구현 및 운영
✦ 코드
✦ 문서화
✦ 교육 훈련 절차와 지원
✦ 문서, 교육훈련, 지원을 동반한 소프트웨어의 신버젼


   • 시스템 개발에 대한 대안적 접근 방법들
   ◆ 프로토타이핑(prototyping)
    = 원하는 시스템을 축소된 범위이지만 가동되는 버전으로 설계하고 구축하는 것.
    = CASE 도구(시스템개발생명주기의 단계들을 자동화된 방식으로 수행할 수 있도록 도와주는 소프트웨어)를 이용하여 수행될 수 있다.
    = CASE 도구들은 화면 과 리포트, 그리고 그밖에 시스템 인터페이스들에 대한 설계를 지원해줌으로써, 프로토타이핑이 좀 더 수월하고 창조적으로 수행될 수 있도록 도와준다.

    ▶ CASE 도구들은 데이터흐름도(Data-flow Diagram : DFD) 및 개체관계성도(Entity-Relationship Diagram : ERD)와 같은 다수의 도식화 기법들을 지원함.
